# Reading pref.tcl
do runProcessor.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./StateDefs.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:25 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./StateDefs.sv 
# -- Compiling package StateDefs
# 
# Top level modules:
# 	--none--
# End time: 09:33:25 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:25 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 09:33:25 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./InstMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:25 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./InstMemory.v 
# -- Compiling module InstMemory
# 
# Top level modules:
# 	InstMemory
# End time: 09:33:25 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:25 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 09:33:25 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./StateMachine.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:25 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./StateMachine.sv 
# -- Compiling package StateMachine_sv_unit
# -- Importing package StateDefs
# -- Compiling module StateMachine
# -- Compiling module StateMachine_tb
# 
# Top level modules:
# 	StateMachine_tb
# End time: 09:33:25 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:26 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling package ControlUnit_sv_unit
# -- Importing package StateDefs
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 09:33:26 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./DataMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:26 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./DataMemory.v 
# -- Compiling module DataMemory
# 
# Top level modules:
# 	DataMemory
# End time: 09:33:26 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Mux_2_to_1.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:26 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./Mux_2_to_1.sv 
# -- Compiling module Mux_2_to_1
# -- Compiling module Mux_2_to_1_tb
# 
# Top level modules:
# 	Mux_2_to_1
# 	Mux_2_to_1_tb
# End time: 09:33:26 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ALU.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:26 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./ALU.sv 
# -- Compiling module ALU
# -- Compiling module ALU_tb
# 
# Top level modules:
# 	ALU_tb
# End time: 09:33:26 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./RegisterFile.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:26 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./RegisterFile.sv 
# -- Compiling module RegisterFile
# -- Compiling module RegisterFile_tb
# 
# Top level modules:
# 	RegisterFile_tb
# End time: 09:33:26 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./DataPath.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:26 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./DataPath.sv 
# -- Compiling module DataPath
# -- Compiling module DataPath_tb
# 
# Top level modules:
# 	DataPath_tb
# End time: 09:33:26 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./testProcessor.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:26 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./testProcessor.sv 
# -- Compiling module testProcessor
# 
# Top level modules:
# 	testProcessor
# End time: 09:33:26 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Processor.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 09:33:26 on Jun 08,2025
# vlog -reportprogress 300 -work work "+acc" ./Processor.sv 
# -- Compiling module Processor
# -- Compiling module Processor_tb
# 
# Top level modules:
# 	Processor
# 	Processor_tb
# End time: 09:33:26 on Jun 08,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  testProcessor
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug testProcessor 
# Start time: 09:33:27 on Jun 08,2025
# Loading sv_std.std
# Loading work.testProcessor
# Loading work.Processor
# Loading work.StateDefs
# Loading work.ControlUnit_sv_unit
# Loading work.ControlUnit
# Loading work.PC
# Loading work.InstMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.StateMachine_sv_unit
# Loading work.StateMachine
# Loading work.DataPath
# Loading work.DataMemory
# Loading work.Mux_2_to_1
# Loading work.RegisterFile
# Loading work.ALU
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# WARNING: No extended dataflow license exists
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do Processor_wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /testProcessor/Clk
# add wave -noupdate /testProcessor/Reset
# add wave -noupdate /testProcessor/State
# add wave -noupdate /testProcessor/NextState
# add wave -noupdate /testProcessor/IR_Out
# add wave -noupdate /testProcessor/PC_Out
# add wave -noupdate /testProcessor/ALU_A
# add wave -noupdate /testProcessor/ALU_B
# add wave -noupdate /testProcessor/ALU_Out
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
# 
# Begin Simulation.
# Time is 0 : Reset = 0   PC_Out = xx   IR_Out = xxxx  State = x  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 10000 : Reset = 0   PC_Out = xx   IR_Out = xxxx  State = 7  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 30000 : Reset = 0   PC_Out = 00   IR_Out = xxxx  State = 7  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 40000 : Reset = 1   PC_Out = 00   IR_Out = xxxx  State = 7  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 50000 : Reset = 1   PC_Out = 00   IR_Out = xxxx  State = 8  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 70000 : Reset = 1   PC_Out = 01   IR_Out = 7000  State = 9  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 90000 : Reset = 1   PC_Out = 01   IR_Out = 7000  State = 7  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 110000 : Reset = 1   PC_Out = 00   IR_Out = 7000  State = 8  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 130000 : Reset = 1   PC_Out = 01   IR_Out = 21b1  State = 9  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 150000 : Reset = 1   PC_Out = 01   IR_Out = 21b1  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 170000 : Reset = 1   PC_Out = 01   IR_Out = 21b1  State = 6  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 190000 : Reset = 1   PC_Out = 01   IR_Out = 21b1  State = 8  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 210000 : Reset = 1   PC_Out = 02   IR_Out = 21b1  State = 9  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 230000 : Reset = 1   PC_Out = 02   IR_Out = 21b1  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 250000 : Reset = 1   PC_Out = 02   IR_Out = 21b1  State = 6  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 270000 : Reset = 1   PC_Out = 02   IR_Out = 21b1  State = 8  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 290000 : Reset = 1   PC_Out = 03   IR_Out = 22a2  State = 9  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 310000 : Reset = 1   PC_Out = 03   IR_Out = 22a2  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 330000 : Reset = 1   PC_Out = 03   IR_Out = 22a2  State = 6  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 350000 : Reset = 1   PC_Out = 03   IR_Out = 22a2  State = 8  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 370000 : Reset = 1   PC_Out = 04   IR_Out = 4210  State = 9  ALU A = xxxx  ALU B = xxxx ALU Out = 0000  RA Address = 0000
# Time is 390000 : Reset = 1   PC_Out = 04   IR_Out = 4210  State = 4  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0010
# Time is 410000 : Reset = 1   PC_Out = 04   IR_Out = 4210  State = 8  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 430000 : Reset = 1   PC_Out = 05   IR_Out = 23c1  State = 9  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 450000 : Reset = 1   PC_Out = 05   IR_Out = 23c1  State = 2  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 470000 : Reset = 1   PC_Out = 05   IR_Out = 23c1  State = 6  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 490000 : Reset = 1   PC_Out = 05   IR_Out = 23c1  State = 8  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 510000 : Reset = 1   PC_Out = 06   IR_Out = 3010  State = 9  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 530000 : Reset = 1   PC_Out = 06   IR_Out = 3010  State = 3  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 550000 : Reset = 1   PC_Out = 06   IR_Out = 3010  State = 8  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 570000 : Reset = 1   PC_Out = 07   IR_Out = 27e1  State = 9  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 590000 : Reset = 1   PC_Out = 07   IR_Out = 27e1  State = 2  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 610000 : Reset = 1   PC_Out = 07   IR_Out = 27e1  State = 6  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 630000 : Reset = 1   PC_Out = 07   IR_Out = 27e1  State = 8  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 650000 : Reset = 1   PC_Out = 08   IR_Out = 4010  State = 9  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 670000 : Reset = 1   PC_Out = 08   IR_Out = 4010  State = 4  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 690000 : Reset = 1   PC_Out = 08   IR_Out = 4010  State = 8  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 710000 : Reset = 1   PC_Out = 09   IR_Out = 100a  State = 9  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 730000 : Reset = 1   PC_Out = 09   IR_Out = 100a  State = 1  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 750000 : Reset = 1   PC_Out = 09   IR_Out = 100a  State = 8  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 770000 : Reset = 1   PC_Out = 0a   IR_Out = 1a6a  State = 9  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# Time is 790000 : Reset = 1   PC_Out = 0a   IR_Out = 1a6a  State = 1  ALU A = xxxx  ALU B = 0000 ALU Out = 0000  RA Address = 1010
# Time is 810000 : Reset = 1   PC_Out = 0a   IR_Out = 1a6a  State = 8  ALU A = 0000  ALU B = 0000 ALU Out = 0000  RA Address = 0000
# 
# End of Simulation.
# 
# ** Note: $stop    : ./testProcessor.sv(32)
#    Time: 830 ns  Iteration: 2  Instance: /testProcessor
# Break in Module testProcessor at ./testProcessor.sv line 32
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 871500 ps
# 
# End
# End time: 09:33:50 on Jun 08,2025, Elapsed time: 0:00:23
# Errors: 0, Warnings: 0
